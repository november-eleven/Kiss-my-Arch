#!/bin/bash

function configure_hostname() {
  declare hostname="$1"

  echo "[hostname] configure"
  echo "${hostname}" > /etc/hostname || exit 255
  chmod 0644 /etc/hostname || exit 255
  chown root:root /etc/hostname || exit 255

}

function configure_locale() {
  declare locale="$1" lang="$2"

  echo "[locale] generate"
  echo "en_US.UTF-8 UTF-8" > /etc/locale.gen || exit 255
  echo "${locale}" >> /etc/locale.gen || exit 255
  chmod 0644 /etc/locale.gen || exit 255
  chown root:root /etc/locale.gen || exit 255

  echo "LANG=\"${lang}\"" > /etc/locale.conf || exit 255
  chmod 0644 /etc/locale.conf || exit 255
  chown root:root /etc/locale.conf || exit 255
  locale-gen || exit 255

}


function configure_vconsole() {
  declare keymap="$1" font="$2"

  echo "[vconsole] configure"
  echo "KEYMAP=${keymap}" > /etc/vconsole.conf || exit 255
  echo "FONT=${font}" >> /etc/vconsole.conf || exit 255
  chmod 0644 /etc/vconsole.conf || exit 255
  chown root:root /etc/vconsole.conf || exit 255

}

function configure_timezone() {
  declare timezone="$1"

  echo "[timezone] use ${timezone}"
  ln -sf /usr/share/zoneinfo/${timezone} /etc/localtime || exit 255
  hwclock --systohc --utc

}

function configure_mkinitcpio() {
  declare modules="$1" binaries="$2" files="$3" hooks="$4"

  echo "[mkinitcpio] reset configuration"
  echo '' > /etc/mkinitcpio.conf || exit 255

  echo "[mkinitcpio] configure modules with: ${modules}"
  echo "# MODULES" >> /etc/mkinitcpio.conf || exit 255
  echo "MODULES=\"${modules}\"" >> /etc/mkinitcpio.conf || exit 255
  echo "" >> /etc/mkinitcpio.conf || exit 255

  echo "[mkinitcpio] configure binaries with: ${binaries}"
  echo "# BINARIES" >> /etc/mkinitcpio.conf || exit 255
  echo "BINARIES=\"${binaries}\"" >> /etc/mkinitcpio.conf || exit 255
  echo "" >> /etc/mkinitcpio.conf || exit 255

  echo "[mkinitcpio] configure files with: ${files}"
  echo "# FILES" >> /etc/mkinitcpio.conf || exit 255
  echo "FILES=\"${files}\"" >> /etc/mkinitcpio.conf || exit 255
  echo "" >> /etc/mkinitcpio.conf || exit 255

  echo "[mkinitcpio] configure hooks with: ${hooks}"
  echo "# HOOKS" >> /etc/mkinitcpio.conf || exit 255
  echo "HOOKS=\"${hooks}\"" >> /etc/mkinitcpio.conf || exit 255
  echo "" >> /etc/mkinitcpio.conf || exit 255

  echo "[mkinitcpio] configure kernel"
  mkinitcpio -p linux || exit 255

}

function configure_modprobe() {

  echo "[modprobe] configure"
  echo 'blacklist pcspkr' > /etc/modprobe.d/nobeep.conf || exit 255
  chmod 0644  /etc/modprobe.d/nobeep.conf || exit 255
  chown root:root  /etc/modprobe.d/nobeep.conf || exit 255

}

function configure_network() {

  echo "[network] enable network-manager"
  systemctl enable NetworkManager.service || exit 255

  echo "[network] enable sshd"
  systemctl enable sshd.service || exit 255

}

function configure_pacman() {

  echo "[pacman] configure mirrorlist"
  echo 'Server = http://mir.archlinux.fr/$repo/os/$arch' > /etc/pacman.d/mirrorlist || exit 255
  echo 'Server = http://delta.archlinux.fr/$repo/os/$arch' >> /etc/pacman.d/mirrorlist || exit 255
  echo 'Server = http://mirrors.kernel.org/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist || exit 255
  echo 'Server = http://archlinux.mirrors.ovh.net/archlinux/$repo/os/$arch' >> /etc/pacman.d/mirrorlist || exit 255
  chmod 0644 /etc/pacman.d/mirrorlist || exit 255
  chown root:root /etc/pacman.d/mirrorlist || exit 255

}

function configure_bootloader() {

  echo "[bootloader] install grub"
  grub-install --target=i386-pc /dev/sda || exit 255

  echo "[bootloader] configure grub"
  sed -r -e 's#GRUB_CMDLINE_LINUX_DEFAULT="quiet"#GRUB_CMDLINE_LINUX_DEFAULT="quiet elevator=noop"#' \
    -i /etc/default/grub || exit 255
  sed -r -e 's/^#?GRUB_TIMEOUT=.*$/GRUB_TIMEOUT=0/' -i /etc/default/grub || exit 255

  echo "[bootloader] update grub"
  grub-mkconfig -o /boot/grub/grub.cfg || exit 255

}

function configure_vbox() {

  echo "[vbox] enable vboxservice"
  systemctl enable vboxservice.service || exit 255

}

function configure_x11() {

  echo "[xorg] configure keyboard"
  localectl set-x11-keymap fr oss || exit 255

}

function configure_user() {
  declare root_passwd="$1" user_name="$2" user_passwd="$3" user_comment="$4"

  echo "[user] configure root password" || exit 255
  echo "root:${root_passwd}" | chpasswd || exit 255

  echo "[user] add ${user_name} user"
  useradd -m -s /bin/bash -G 'log,audio,lp,storage,systemd-journal,users,wheel' \
    -c "${user_comment}" "${user_name}" || exit 255

  echo "[user] configure ${user_name} password"
  echo "${user_name}:${user_passwd}" | chpasswd || exit 255

  echo "[user] configure sudo"
  echo "${user_name} ALL=(ALL) ALL" > "/etc/sudoers.d/${user_name}" || exit 255
  echo "Defaults pwfeedback" > "/etc/sudoers.d/feedback" || exit 255

}

configure_hostname "archlinux"
configure_locale "fr_FR.UTF-8 UTF-8" "fr_FR.UTF-8"
configure_vconsole "fr-pc" "lat9w-16"
configure_timezone "Europe/Paris"
configure_mkinitcpio "i915 ext4" "" "" "base udev autodetect modconf block encrypt lvm2 filesystems keyboard fsck"
configure_network
configure_pacman
configure_modprobe
configure_bootloader
configure_vbox
configure_x11
configure_user "${ROOT_PASSWORD}" "${USER_NAME}" "${USER_PASSWORD}" "${USER_COMMENT}"
