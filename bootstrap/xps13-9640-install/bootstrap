#!/bin/bash

function mount_filesystem() {
  declare esp="$1" root="$2" swap="$3"

  echo "[mount] /"
  mkdir -p /mnt
  mount "${root}" /mnt

  echo "[mount] /boot"
  mkdir -p /mnt/boot
  mount "${esp}" /mnt/boot

  echo "[mount] enable swap"
  swapon "${swap}"

}

function umount_filesystem() {

  echo "[mount] disable swap"
  swapoff -a

  echo "[umount] /boot"
  umount /mnt/boot

  echo "[umount] /"
  umount /mnt

}

function pacstrap_install() {

  echo "[pacstrap] update system clock"
  timedatectl set-ntp true

  echo "[pacstrap] configure mirrorlist"
  echo 'Server = http://mir.archlinux.fr/$repo/os/$arch' > /etc/pacman.d/mirrorlist
  echo 'Server = http://delta.archlinux.fr/$repo/os/$arch' >> /etc/pacman.d/mirrorlist
  echo 'Server = http://mirrors.kernel.org/archlinux/$repo/os/x86_64' >> /etc/pacman.d/mirrorlist

  echo "[pacstrap] install base"
  pacstrap /mnt base base-devel bash-completion

  echo "[pacstrap] install grub"
  pacstrap /mnt grub os-prober efibootmgr

  echo "[pacstrap] install network-manager"
  pacstrap /mnt networkmanager wireless_tools wpa_supplicant

  echo "[pacstrap] install openssh"
  pacstrap /mnt openssh

  echo "[pacstrap] install xorg-server"
  pacstrap /mnt xorg-server xorg-xinit xorg-server-utils

  echo "[pacstrap] install xorg-driver"
  pacstrap /mnt xf86-video-intel xf86-input-libinput xf86-input-mouse xf86-input-keyboard

  echo "[pacstrap] install intel-ucode"
  pacstrap /mnt intel-ucode

  echo "[pacstrap] install python2"
  pacstrap /mnt python2

  echo "[pacstrap] install sudo"
  pacstrap /mnt sudo

}

function generate_fstab() {

  echo "[fstab] generate"
  genfstab -U /mnt > /mnt/etc/fstab
  chmod 0644  /mnt/etc/fstab
  chown root:root  /mnt/etc/fstab

  echo "[fstab] configure"
  sed -r -e 's#rw,relatime,data=ordered#defaults,noatime,discard#g' -i /mnt/etc/fstab
  sed -r -e 's#rw,relatime#defaults,noatime,discard#g' -i /mnt/etc/fstab

}

function execute_chroot() {

  echo "[chroot] copy configure script"
  cp /usr/local/sbin/arch-configure /mnt/install
  if [[ $? -ne 0 ]]; then
    exit 255
  fi

  echo "[chroot] execute configure script"
  arch-chroot /mnt /install
  if [[ $? -ne 0 ]]; then
    exit 255
  fi
  rm /mnt/install

}

function reboot_required() {

  echo ""
  echo ""
  echo "[finished] Installation completed, you can reboot safely now."
  echo ""
  echo ""

}

function wipe_disk() {
  declare device="$1"

  echo "[disk] wipe ${device}"
  parted -s "${device}" print | awk '/^ / {print $1}' | xargs -I id parted -s "${device}" rm id
  if [[ $(parted -s ${device} print | awk '/^ / {print $1}') ]]; then
    echo >&2 'no partitions should be present...'
    exit 255
  fi

  parted -s "${device}" mklabel gpt

}

function create_partitions() {
  declare device="$1"

  echo "[disk] create partitions for ${device}"

  echo "[disk] create EFI system partition"
  parted -s "${device}" mkpart ESP fat32 1MiB 513MiB
  parted -s "${device}" set 1 boot on

  echo "[disk] create Archlinux partition"
  parted -s "${device}" mkpart primary ext4 513MiB 100%

}

function format_filesystem() {
  declare esp="$1" root="$2"

  echo "[filesystem] make fat32 filesystem for ${esp}"
  mkfs.vfat -F 32 -n EFI "${esp}"

  echo "[filesystem] make ext4 filesystem for ${root}"
  mkfs.ext4 -F -L Archlinux "${root}"

}

function encrypt_filesystem() {
  declare root="$1" password="$2" volume="$3" size="$4"

  echo "[encrypt] create encrypted filesystem for ${root}"
  echo -n "${password}" | cryptsetup --use-urandom \
    --cipher aes-xts-plain64 --key-size 512 --hash sha512 \
    luksFormat "${root}" || exit 255

  echo "[encrypt] open ${root} on device mapper"
  echo -n "${password}" | cryptsetup open --type luks "${root}" lvm || exit 255

  echo "[encrypt] create physical volume on /dev/mapper/lvm"
  pvcreate /dev/mapper/lvm || exit 255

  echo "[encrypt] create ${volume} volume group on /dev/mapper/lvm"
  vgcreate "${volume}" /dev/mapper/lvm || exit 255

  echo "[encrypt] create swap logical volume on /dev/mapper/lvm"
  lvcreate --size "${size}" "${volume}" --name swap || exit 255

  echo "[encrypt] create root logical volume on /dev/mapper/lvm"
  lvcreate -l +100%FREE "${volume}" --name root || exit 255

  echo "[encrypt] make ext4 filesystem for /dev/mapper/${volume}-root"
  mkfs.ext4 "/dev/mapper/${volume}-root" || exit 255

  echo "[encrypt] make swap filesystem for /dev/mapper/${volume}-swap"
  mkswap "/dev/mapper/${volume}-swap" || exit 255

}

function ask_root_password() {

  ask_header

  read -r -s -p "set root password: " ROOT_PASSWORD
  echo
  read -r -s -p "confirm root password: " ROOT_PASSWORD_CONFIRM
  echo

  if [[ -z ${ROOT_PASSWORD} ]]; then
    echo ""
    echo "Please define root's password."
    echo ""
    return 1
  fi

  if [[ ${ROOT_PASSWORD_CONFIRM} != ${ROOT_PASSWORD} ]]; then
    echo ""
    echo "Please use the same password as confirmation."
    echo ""
    return 1
  fi

  export ROOT_PASSWORD
  unset ROOT_PASSWORD_CONFIRM
  return 0

}

function ask_user_password() {

  ask_header

  read -r -s -p "set ${USER_NAME} password: " USER_PASSWORD
  echo
  read -r -s -p "confirm ${USER_NAME} password: " USER_PASSWORD_CONFIRM
  echo

  if [[ -z ${USER_PASSWORD} ]]; then
    echo ""
    echo "Please define ${USER_NAME}'s password."
    echo ""
    return 1
  fi

  if [[ ${USER_PASSWORD_CONFIRM} != ${USER_PASSWORD} ]]; then
    echo ""
    echo "Please use the same password as confirmation."
    echo ""
    return 1
  fi

  export USER_PASSWORD
  unset USER_PASSWORD_CONFIRM
  return 0

}

function ask_user_info() {

  ask_header

  read -r -p "username [thomas]: " USER_NAME
  USER_NAME=${USER_NAME:-"thomas"}

  read -r -p "full name [Thomas LE ROUX]: " USER_COMMENT
  USER_COMMENT=${USER_COMMENT:-"Thomas LE ROUX"}

  export USER_NAME
  export USER_COMMENT
  return 0

}

function ask_disk_password() {

  ask_header

  read -r -s -p "set disk encryption password: " DISK_PASSWORD
  echo
  read -r -s -p "confirm disk encryption password: " DISK_PASSWORD_CONFIRM
  echo

  if [[ -z ${DISK_PASSWORD} ]]; then
    echo ""
    echo "Please define a disk encryption password."
    echo ""
    return 1
  fi

  if [[ ${DISK_PASSWORD_CONFIRM} != ${DISK_PASSWORD} ]]; then
    echo ""
    echo "Please use the same password as confirmation."
    echo ""
    return 1
  fi

  export DISK_PASSWORD
  unset DISK_PASSWORD_CONFIRM
  return 0

}

function ask_header() {

  clear

  echo
  echo
  echo "#########################################################################################"
  echo "#                                                                                       #"
  echo "#                                  Arch Linux install                                   #"
  echo "#                                                                                       #"
  echo "#########################################################################################"
  echo
  echo

}

function ask_configuration() {

  until ask_root_password
  do
    sleep 5
    clear
  done

  until ask_user_info
  do
    sleep 5
    clear
  done

  until ask_user_password
  do
    sleep 5
    clear
  done

  until ask_disk_password
  do
    sleep 5
    clear
  done

}

ask_configuration
wipe_disk "/dev/sda"
create_partitions "/dev/sda"
format_filesystem "/dev/sda1" "/dev/sda2"
encrypt_filesystem "/dev/sda2" "${DISK_PASSWORD}" "vbox0" "2G"
mount_filesystem "/dev/sda1" "/dev/mapper/vbox0-root" "/dev/mapper/vbox0-swap"
pacstrap_install
generate_fstab
execute_chroot
umount_filesystem
reboot_required
